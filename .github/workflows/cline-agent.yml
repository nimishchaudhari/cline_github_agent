name: Cline Agent

on:
  issue_comment:
    types: [created]

jobs:
  handle_comment:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '@cline_agent')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get issue details
        id: issue
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            core.setOutput('title', issue.data.title);
            core.setOutput('body', issue.data.body);

      - name: Send to AI agent
        id: ai_response
        env:
          AI_AGENT_API: ${{ secrets.AI_AGENT_API }}
        run: |
          set -x
          echo "üîÑ Contacting AI agent API..."
          trap "echo '‚ùå Failed to get AI response'; exit 1" ERR

          curl -f -v -X POST "$AI_AGENT_API" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.AI_AGENT_TOKEN }}" \
            -d @- <<EOF > ai_response.json
          {
            "repository": "${{ github.repository }}",
            "issue_number": ${{ github.event.issue.number }},
            "issue_title": "${{ steps.issue.outputs.title }}",
            "issue_body": "${{ steps.issue.outputs.body }}",
            "comment": "${{ toJSON(github.event.comment.body) }}",
            "github_token": "${{ secrets.GITHUB_TOKEN }}"
          }
          EOF

          if [ ! -s ai_response.json ]; then
            echo "‚ùå Empty response from AI API"
            exit 1
          fi
          echo "‚úÖ Received valid AI response"

      - name: Parse AI response
        id: parse
        run: |
          set -e
          echo "üîç Parsing AI response..."
          changes=$(jq -r '.changes' ai_response.json || {
            echo "‚ùå Failed to parse changes from AI response";
            jq . ai_response.json;
            exit 1;
          })
          comment=$(jq -r '.comment' ai_response.json || {
            echo "‚ùå Failed to parse comment from AI response";
            jq . ai_response.json;
            exit 1;
          })
          echo "changes=$changes" >> $GITHUB_OUTPUT
          echo "comment=$comment" >> $GITHUB_OUTPUT
          echo "‚úÖ Successfully parsed AI response"

      - name: Cleanup temporary files
        run: rm -f ai_response.json

      - name: Apply changes and create PR
        id: pr
        run: |
          set -ex
          echo "üõ† Applying changes from AI..."
          echo "${{ steps.parse.outputs.changes }}" | git apply -v || {
            echo "‚ùå Failed to apply changes patch";
            exit 1;
          }
          git checkout -b fix-issue-${{ github.event.issue.number }}
          git add .
          git -c user.name="Cline Agent" -c user.email="agent@cline.com" commit -m "Fix issue #${{ github.event.issue.number }}"
          git push origin fix-issue-${{ github.event.issue.number }}

          echo "üì¶ Creating pull request..."
          pr_url=$(gh pr create --title "Fix issue #${{ github.event.issue.number }}" --body "Automated fix by Cline Agent") || {
            echo "‚ùå Failed to create PR";
            exit 1;
          }
          echo "pr_url=$pr_url" >> $GITHUB_OUTPUT
          echo "‚úÖ PR created: $pr_url"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on issue
        uses: actions/github-script@v6
        with:
          script: |
            const comment = `${{ steps.parse.outputs.comment }}\n\nPull Request: ${{ steps.pr.outputs.pr_url }}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
